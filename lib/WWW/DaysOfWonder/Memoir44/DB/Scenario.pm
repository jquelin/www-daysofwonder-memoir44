use 5.010;
use strict;
use warnings;

package WWW::DaysOfWonder::Memoir44::DB::Scenario;
# ABSTRACT: orlite for scenario table in database

=attr my $int = $scenario->id;

Id of the scenario.

=attr my $str = $scenario->name;

Name of the scenario.

=attr my $str = $scenario->operation;

Operation the scenario is part of.

=attr my $date = $scenario->updated;

Date of last scenario update (format C<yyyy-mm-dd>).

=attr my $int = $scenario->rating;

Average scenario rating (1, 2 or 3).

=attr my $str = $scenario->front;

Front where the scenario takes place. Can be West, East,
Mediterranean, etc.

=attr my $str = $scenario->author;

Who wrote the scenario.

=attr my $str = $scenario->board;

Country, beach, winter or desert.

=attr my $str = $scenario->format;

Standard, overlord or breakthru.

=attr my $str = $scenario->source;

Game (bundled with board game), approved (official extensions), public
(all the other).

=attr my $bool = $scenario->need_tp;

Whether terrain pack extension is needed.

=attr my $bool = $scenario->need_ef;

Whether eastern front extension is needed.

=attr my $bool = $scenario->need_mt;

Whether mediterranean theater extension is needed.

=attr my $bool = $scenario->need_pt;

Whether pacific theater extension is needed.

=attr my $bool = $scenario->need_ap;

Whether air pack extension is needed.

=attr my $bool = $scenario->need_bm;

Whether battle maps extension is needed.

=attr my $bool = $scenario->need_cb;

Whether campaign book extension is needed.

=cut


# -- methods autogenerated by orlite

=method select

    # Get all objects in list context
    my @list = WWW::DaysOfWonder::Memoir44::DB::Scenario->select;

    # Get a subset of objects in scalar context
    my $array_ref = WWW::DaysOfWonder::Memoir44::DB::Scenario->select(
        'where id > ? order by id',
        1000,
    );

The C<select> method executes a typical SQL C<SELECT> query on the
scenario table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM scenario> section of the query, followed by variables to be bound
to the placeholders in the SQL phrase. Any SQL that is compatible with
SQLite can be used in the parameter.

Returns a list of B<WWW::DaysOfWonder::Memoir44::DB::Scenario> objects
when called in list context, or a reference to an ARRAY of
B<WWW::DaysOfWonder::Memoir44::DB::Scenario> objects when called in
scalar context.

Throws an exception on error, typically directly from the L<DBI> layer.


=method count

    # How many objects are in the table
    my $rows = WWW::DaysOfWonder::Memoir44::DB::Scenario->count;

    # How many objects
    my $small = WWW::DaysOfWonder::Memoir44::DB::Scenario->count(
        'where id > ?',
        1000,
    );

The C<count> method executes a C<SELECT COUNT(*)> query on the
scenario table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM scenario> section of the query, followed by variables to be bound
to the placeholders in the SQL phrase. Any SQL that is compatible with
SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.


=method my $scenario = Scenario->new(%params),

The C<new> constructor is used to create a new abstract object that
is not (yet) written to the database.

Returns a new L<WWW::DaysOfWonder::Memoir44::DB::Scenario> object.


=head2 my $scenario = Scenario->create(%params);

The C<create> constructor is a one-step combination of C<new> and
C<insert> that takes the column parameters, creates a new
L<WWW::DaysOfWonder::Memoir44::DB::Scenario> object, inserts the
appropriate row into the L<scenario> table, and then returns the object.

If the primary key column C<id> is not provided to the constructor (or
it is false) the object returned will have C<id> set to a new unique
identifier.

Returns a new L<scenario> object, or throws an exception on error,
typically from the L<DBI> layer.


=method $scenario->insert;

The C<insert> method commits a new object (created with the C<new>
method) into the database.

If a the primary key column C<id> is not provided to the constructor (or
it is false) the object returned will have C<id> set to the new unique
identifier.

Returns the object itself as a convenience, or throws an exception on
error, typically from the L<DBI> layer.


=method delete

    # Delete a single instantiated object
    $object->delete;

    # Delete multiple rows from the scenario table
    WWW::DaysOfWonder::Memoir44::DB::Scenario->delete('where id > ?', 1000);

The C<delete> method can be used in a class form and an instance form.

When used on an existing B<WWW::DaysOfWonder::Memoir44::DB::Scenario>
instance, the C<delete> method removes that specific instance from the
C<scenario>, leaving the object ntact for you to deal with post-delete
actions as you wish.

When used as a class method, it takes a compulsory argument of a SQL
phrase to be added after the C<DELETE FROM scenario> section of the
query, followed by variables to be bound to the placeholders in the SQL
phrase. Any SQL that is compatible with SQLite can be used in the
parameter.

Returns true on success or throws an exception on error, or if you
attempt to call delete without a SQL condition phrase.


=method truncate

    # Delete all records in the scenario table
    WWW::DaysOfWonder::Memoir44::DB::Scenario->truncate;

To prevent the common and extremely dangerous error case where deletion
is called accidentally without providing a condition, the use of the
C<delete> method without a specific condition is forbidden.

Instead, the distinct method C<truncate> is provided to delete all
records in a table with specific intent.

Returns true, or throws an exception on error.

=cut

1;
__END__

=for Pod::Coverage::TrustPod
    base
    iterate
    load
    table
